"""create tables

Revision ID: 0e780d140e82
Revises: 
Create Date: 2024-04-06 19:47:17.370570

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "0e780d140e82"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "addresses",
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("district", sa.String(), nullable=True),
        sa.Column("street", sa.String(), nullable=False),
        sa.Column("house_number", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "executors",
        sa.Column("fullname", sa.String(), nullable=False),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column(
            "category", sa.Enum("lightweight", "heavy", name="category"), nullable=False
        ),
        sa.Column(
            "workload", sa.Boolean(), server_default=sa.text("False"), nullable=False
        ),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("True"), nullable=False
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("True"), nullable=False
        ),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "orders",
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("client", sa.String(), nullable=False),
        sa.Column("expected_date", sa.DateTime(), nullable=False),
        sa.Column("in_progres", sa.Boolean(), server_default="False", nullable=False),
        sa.Column("address_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"],
            ["addresses.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "routes",
        sa.Column("total_duration", sa.Integer(), nullable=False),
        sa.Column("execution_date", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column("executor_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["executor_id"],
            ["executors.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "positions",
        sa.Column("duration", sa.Integer(), nullable=False),
        sa.Column("pos", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("pending", "done", "canceled", name="status"),
            server_default=sa.text("'pending'"),
            nullable=False,
        ),
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("route_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["order_id"], ["orders.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["route_id"], ["routes.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "products",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "category", sa.Enum("lightweight", "heavy", name="category"), nullable=False
        ),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Float(), nullable=False),
        sa.Column("article_number", sa.Integer(), nullable=False),
        sa.Column("hazard_class", sa.Integer(), nullable=False),
        sa.Column("expiration_date", sa.DateTime(), nullable=False),
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["order_id"], ["orders.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("products")
    op.drop_table("positions")
    op.drop_table("routes")
    op.drop_table("orders")
    op.drop_table("users")
    op.drop_table("executors")
    op.drop_table("addresses")
    # ### end Alembic commands ###
